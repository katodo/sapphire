######################################################################
#                       SENSORLESS HOME MACRO
######################################################################

[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    G1 Y5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}


######################################################################
#                           UNLOAD_FILAMENT
######################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    # Let the printer know you are following this point with metric values
    G21
    # Let the printer know you are using absolute positioning
    G90
    # Start nozzle heating
    M117 Heating nozzle
    M104 S210
    # Set and wait for nozzle to reach temperature
    M109 S210
    # Reset the position of the extruder
    G92 E0
    # Extrude a short distance before unloading to avoid blob forming
    G1 E10 F100
    # Reset the position of the extruder
    G92 E0
    # Retract BOWDEN_TUBE_LENGTH mm of filament at 2000 mm/minute speed.
    G1 E-125 F500
    # Reset the position of the extruder
    G92 E0
    # Display message on LCD-display to remove the filament
    M117 Remove filament

[gcode_macro START_PRINT]
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    fysetc_blue
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    M140 S{BED_TEMP}               # Start bed heating
    M109 S{EXTRUDER_TEMP}          # Start nozzle heating and wait for reached temperature
    M190 S{BED_TEMP}               # Wait for bed to reach temperature
    fysetc_yellow
    G92 E0                         # Reset Extruder        
    BED_MESH_CLEAR
    G28                            # Home the printer
    Z_TILT_ADJUST
    HOME_Z
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    G92 E0                         # Reset Extruder 
    G1 X3 Y20 Z0.3 F4000           # Move to start position
    G1 X3 Y200.0 Z0.2 F1500 E15    # Draw the first line
    G1 X3.4 Y20 Z0.2 F1500 E30     # Draw the second line
    G92 E0                         # Reset Extruder
    G1 Z2.0 F3000                  # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X4 Y20 Z0.2 F5000           # Move over to prevent blob squish
    G1 Z2.0 F3000                  # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.2 F5000           # Move over to
    fysetc_red

[gcode_macro END_PRINT]
gcode:
    G91    #COORDINATE RELATIVE
    G1 Z+15 F 1000

    G90    #COORDINATE ASSOLUTE
    G1 x10 F3000   #Porta X a 10
    G1 y10 F3000   #Porta Y a 10

    M140 S0                        # Turn off bed
    M104 S0                        # Turn off extruder
    M106 S0                        # Turn off fan    
    G1 E-10 F300 ; Ritrae -10
    M84                            # Disable steppers
    fysetc_red_light               #finished_printing_indicator

[gcode_macro ENDPRINT_MOVEMENT]
gcode:
    G90    #COORDINATE RELATIVE
    G1 Z50 F1500 # abbassa il piatto 
    G1 x0 F7800   #Porta X a 0
    G1 y0 F7800   #Porta Y a 0

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    fysetc_yellow
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    fysetc_red_light
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME


[pause_resume]

[display_status]



[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    ENDPRINT_MOVEMENT
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT


#   █████╗ ██████╗ ██╗  ██╗██╗     ██████╗ ██╗  ██╗███████╗
#  ██╔══██╗██╔══██╗╚██╗██╔╝██║     ╚════██╗██║  ██║██╔════╝
#  ███████║██║  ██║ ╚███╔╝ ██║      █████╔╝███████║███████╗
#  ██╔══██║██║  ██║ ██╔██╗ ██║      ╚═══██╗╚════██║╚════██║
#  ██║  ██║██████╔╝██╔╝ ██╗███████╗██████╔╝     ██║███████║
#  ╚═╝  ╚═╝╚═════╝ ╚═╝  ╚═╝╚══════╝╚═════╝      ╚═╝╚══════╝
#                                                         

# Useful to skip the first read error on ADXL345
[delayed_gcode _Resonance]
initial_duration: 1.0
gcode:
    ACCELEROMETER_QUERY  # check ADXL345

[delayed_gcode _Resonance2]
initial_duration: 2.0
gcode:
    ACCELEROMETER_QUERY  

[gcode_macro ADXL_Shaping_X]
gcode:
    ACCELEROMETER_QUERY
    G28
    TEST_RESONANCES AXIS=X
    G4 P15000   # time required to write the file before start script
    RUN_SHELL_COMMAND CMD=shaper_calibrate_x

[gcode_macro ADXL_Shaping_Y]
gcode:
    ACCELEROMETER_QUERY
    G28
    TEST_RESONANCES AXIS=Y
    G4 P15000
    RUN_SHELL_COMMAND CMD=shaper_calibrate_y

#############################################
[gcode_macro ADXL_Shaping]
gcode:
    ACCELEROMETER_QUERY
    G28
    TEST_RESONANCES AXIS=X
    G4 P10000
    ACCELEROMETER_QUERY
    TEST_RESONANCES AXIS=Y
    G4 P20000   # time required to write the file before start script
    RUN_SHELL_COMMAND CMD=shaper_calibrate_x
    G4 P25000
    RUN_SHELL_COMMAND CMD=shaper_calibrate_y
#############################################

[gcode_macro ADXL_Belts]
gcode:
    ACCELEROMETER_QUERY
    G28
    TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data
    G4 P5000
    ACCELEROMETER_QUERY
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data
    G4 P15000
    RUN_SHELL_COMMAND CMD=shell_calc_belt


#####################################################################
#  Macros
#####################################################################
# !!! This macro only works with the use of gcode_shell_command.py !!!
# you find both needed files at /klipper_config/script
#  - gcode_shell_command.py -> klipper add on file
#  - plot_graph.sh -> shell script that is executed
# 
# Setup:
#  - symlink or copy gcode_shell_command.py to /klipper/klippy/extra
#    e.g ln -s /home/pi/klipper_config/script/gcode_shell_command.py /home/pi/klipper/klippy/extras/gcode_shell_command.py
#  - klipper service restart
#
# Please inspect the shell script by yourself and use it at your own risk
# Functions:
#  - Generate folder if needed. Default path is IS_FOLDER=~/klipper_config/input_shaper
#  - Store a defined number of results for the RESONANCES_TEST/BELT_TEST. Default is STORE_RESULTS=5
#  - generate/store following files for RESONANCES_TEST:
#     - resonances_x_YYYYMMDD_HHMMSS.csv
#     - resonances_y_YYYYMMDD_HHMMSS.csv
#     - resonances_x_YYYYMMDD_HHMMSS.png
#     - resonances_y_YYYYMMDD_HHMMSS.png
#  - generate/store following files for BELT_TEST:
#     - raw_data_belt_a_YYYYMMDD_HHMMSS.csv
#     - raw_data_belt_b_YYYYMMDD_HHMMSS.csv
#     - resonances_belts_YYYYMMDD_HHMMSS.png
#  - remove files from /tmp
#####################################################################
#[gcode_macro RESONANCES_TEST]
#description: Run input shaper test
#gcode:
#  #{% set user = printer['gcode_macro _USER_VARIABLE'] %}
#  _CG28                                                 ; home if needed
#  TURN_OFF_HEATERS                                      ; turn off heaters
#  M107                                                  ; turn off fan
#  #{% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
#  #{% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
#  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
#  MEASURE_AXES_NOISE                                    ; get noise value in log
#  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
#  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
#  TEST_RESONANCES AXIS=X                                ; measure X
#  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
#  TEST_RESONANCES AXIS=Y                                ; measure Y
#  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
#  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
#  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

#[gcode_macro BELT_TEST]
#description: Run resonance test to analyze belts
#gcode:
#  #{% set user = printer['gcode_macro _USER_VARIABLE'] %}
#  _CG28                                                 ; home if needed
#  TURN_OFF_HEATERS                                      ; turn off heaters
#  M107                                                  ; turn off fan
#  #{% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
#  #{% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
#  _PRINT_AR T="BELT TEST: Noise values, check if sensor is installed"
#  MEASURE_AXES_NOISE                                    ; get noise value in log
#  _PRINT_AR T="BELT TEST: Resonance Tests starting ..."
#  _PRINT_AR T="BELT TEST: Mesasure B belt"
#  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
#  _PRINT_AR T="BELT TEST: Mesasure A belt"
#  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
#  _PRINT_AR T="BELT TEST: Resonance Tests done"
#  _PRINT_AR T="BELT TEST: Generate graph in backround"
#  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

# Shell Comand is not supported by a default klipper installation 
#[gcode_shell_command plot_graph]
#command: bash /home/($USER)/klipper_config/script/plot_graph.sh
#timeout: 150.0
#verbose: True
  
  

    