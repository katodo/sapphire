#[homing_override]
#set_position_z: 0
#gcode:
#  M400         # Wait for moves to finish
#  SENSORLESS_HOME_X
#  SENSORLESS_HOME_Y
#  G0 X150 Y150 F6000    # Go to center
#  G28 Z                 # Home Z

######################################################################
#                       SENSORLESS HOME MACRO
######################################################################

[gcode_macro SENSORLESS_HOME_X]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_x'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 X0
    # Move away
    G90
    G1 X5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CUR}

[gcode_macro SENSORLESS_HOME_Y]
gcode:
    {% set HOME_CUR = 0.700 %}
    {% set driver_config = printer.configfile.settings['tmc2209 stepper_y'] %}
    {% set RUN_CUR = driver_config.run_current %}
    # Set current for sensorless homing
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CUR}
    # Pause to ensure driver stall flag is clear
    G4 P2000
    # Home
    G28 Y0
    # Move away
    G90
    G1 Y5 F1200
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CUR}



######################################################################
#                           UNLOAD_FILAMENT
######################################################################

[gcode_macro UNLOAD_FILAMENT]
gcode:
    # Let the printer know you are following this point with metric values
    G21
    # Let the printer know you are using absolute positioning
    G90
    # Start nozzle heating
    M117 Heating nozzle
    M104 S210
    # Set and wait for nozzle to reach temperature
    M109 S210
    # Reset the position of the extruder
    G92 E0
    # Extrude a short distance before unloading to avoid blob forming
    G1 E10 F100
    # Reset the position of the extruder
    G92 E0
    # Retract BOWDEN_TUBE_LENGTH mm of filament at 2000 mm/minute speed.
    G1 E-125 F500
    # Reset the position of the extruder
    G92 E0
    # Display message on LCD-display to remove the filament
    M117 Remove filament

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 5
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

        {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
	
	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}

# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# For use with Marlin's linear advance calibration: https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro CLEAR_MESH]
gcode:
    BED_MESH_CLEAR
    G28 

[gcode_macro BEDSCREWADJUST_START]
gcode:
  BED_SCREWS_ADJUST

[gcode_macro BEDSCREWADJUST_ACCEPT]
gcode:
  ACCEPT

[gcode_macro BEDSCREWADJUST_SAVE]
gcode:
  SAVE_CONFIG


[gcode_macro SCREWS_CALCULATE_TAMB]
gcode:
  #M190 S100     #Set extruder temperature and wait
  BED_MESH_CLEAR
  G28                            # Home the printer
  Z_TILT_ADJUST
  HOME_Z
  SCREWS_TILT_CALCULATE


[gcode_macro SCREWS_CALCULATE_70]
gcode:
  M190 S70     #Set extruder temperature and wait
  BED_MESH_CLEAR
  G28                            # Home the printer
  Z_TILT_ADJUST
  HOME_Z
  SCREWS_TILT_CALCULATE

[gcode_macro SCREWS_CALCULATE_100]
gcode:
  M190 S100     #Set extruder temperature and wait
  BED_MESH_CLEAR
  G28                            # Home the printer
  Z_TILT_ADJUST
  HOME_Z
  SCREWS_TILT_CALCULATE



[gcode_macro Z_TILT_ADJUST_MY]
gcode:  
  G28
  Z_TILT_ADJUST


[gcode_macro POWER_OFF_LAMPADA]
gcode:
  {action_call_remote_method("set_device_power",
                             device="lampada",
                             state="off")}

[gcode_macro POWER_ON_LAMPADA]
gcode:
  {action_call_remote_method("set_device_power",
                             device="lampada",
                             state="on")}

[gcode_macro HOME_X]
gcode:
    g28 x

[gcode_macro HOME_Y]
gcode:
    g28 y


[gcode_macro HOME_Z]
gcode:
    g28 z

[gcode_macro START_PRINT]
; gcode parameters for area bed mesh
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
gcode:
    fysetc_blue
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(220)|float %}
    M140 S{BED_TEMP}               # Start bed heating
    M109 S{EXTRUDER_TEMP}          # Start nozzle heating and wait for reached temperature
    M190 S{BED_TEMP}               # Wait for bed to reach temperature
    fysetc_yellow
    G92 E0                         # Reset Extruder        
    BED_MESH_CLEAR
    G28                            # Home the printer
    Z_TILT_ADJUST
    HOME_Z
    BED_MESH_CALIBRATE AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    G92 E0                         # Reset Extruder 
    G1 X3 Y20 Z0.3 F4000           # Move to start position
    G1 X3 Y200.0 Z0.2 F1500 E15    # Draw the first line
    G1 X3.4 Y20 Z0.2 F1500 E30     # Draw the second line
    G92 E0                         # Reset Extruder
    G1 Z2.0 F3000                  # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X4 Y20 Z0.2 F5000           # Move over to prevent blob squish
    G1 Z2.0 F3000                  # Move Z Axis up little to prevent scratching of Heat Bed
    G1 X5 Y20 Z0.2 F5000           # Move over to
    fysetc_red

[gcode_macro END_PRINT]
gcode:
    M140 S0                        # Turn off bed
    M104 S0                        # Turn off extruder
    M106 S0                        # Turn off fan    
    ENDPRINT_MOVEMENT
    #G90
    #G1 Z260 F1500 # abbassa il piatto 
    #G1 x0 F7800   #Porta X a 0
    #G1 y0 F7800   #Porta Y a 0
    #M84                            # Disable steppers
    fysetc_red_light               #finished_printing_indicator
    

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    fysetc_yellow
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000


[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    fysetc_red_light
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    TURN_OFF_HEATERS
    ENDPRINT_MOVEMENT
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT


[gcode_macro ENDPRINT_MOVEMENT]
gcode:
    G90    #COORDINATE RELATIVE
    G1 Z260 F1500 # abbassa il piatto 
    G1 x0 F7800   #Porta X a 0
    G1 y0 F7800   #Porta Y a 0
    M84                            # Disable steppers


[gcode_macro fysetc_yellow]
gcode:
    SET_LED LED=fysetc_mini12864 RED=1.0 GREEN=0.7 BLUE=0.0
    #SET_LED LED=fysetc_mini12864 RED=0.2 GREEN=0.2 BLUE=0.2 INDEX=1

[gcode_macro fysetc_green]
gcode:
    SET_LED LED=fysetc_mini12864 RED=0.0 GREEN=1.0 BLUE=0.0
    #SET_LED LED=my_neopixel RED=0.3 GREEN=0.1 BLUE=0.0 INDEX=3


[gcode_macro fysetc_red]
gcode:
    SET_LED LED=fysetc_mini12864 RED=1.0 GREEN=0.0 BLUE=0.0
    #SET_LED LED=my_neopixel RED=0.3 GREEN=0.1 BLUE=0.0 INDEX=3

[gcode_macro fysetc_red_light]
gcode:
    SET_LED LED=fysetc_mini12864 RED=0.3 GREEN=0.0 BLUE=0.0

[gcode_macro fysetc_blue]
gcode:
    SET_LED LED=fysetc_mini12864 RED=0.0 GREEN=0.0 BLUE=1.0
    #SET_LED LED=my_neopixel RED=0.0 GREEN=0.0 BLUE=0.2 INDEX=1

[gcode_macro fysetc_endjob_ok]
gcode:
    #SET_LED LED=my_neopixel RED=0.3 GREEN=0.1 BLUE=0.0 INDEX=3
    SET_LED LED=fysetc_mini12864 RED=0.0 GREEN=0.0 BLUE=0.0
    SET_LED LED=fysetc_mini12864 RED=0.0 GREEN=0.4 BLUE=0.0 INDEX=1
    